##
# This /etc/environment file is sourced for each new shell.
# This file is autogenerated -- do not edit this file.
#
# This file sets the default PATH, load paths, language, history,
# and application-specific variables for Go, Java, Ruby, etc.
#
# To build this file, run environment.sh in the directory above.
#
##

##########################################################################

# Paths for Unix typical bin & sbin
#
#      /usr/local/bin,sbin
#      /usr/bin,sbin
#      /bin,sbin
#      ~/bin,sbin

PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:$HOME/bin:$HOME/sbin

##########################################################################

# Paths for current versions of software in /opt/* directory.
# We want the /opt versions to supercede any base system versions.
# We create an OPT variable to make it easy to set or unset these.

OPT=
OPT=$OPT:/opt/ec2-api-tools/current/bin
OPT=$OPT:/opt/gcc/current/bin
OPT=$OPT:/opt/jq
OPT=$OPT:/opt/packer
OPT=$OPT:/opt/rbenv/bin
OPT=$OPT:/opt/redis/current/bin
OPT=$OPT:/opt/ruby-build/bin
OPT=$OPT:/opt/rubygems/current/bin
OPT=$OPT:/opt/rubymine/current/bin
OPT=$OPT:/opt/sbt/current/bin
OPT=$OPT:/opt/sublime/current
OPT=$OPT:/opt/subversion/current/bin
OPT=$OPT:/opt/vim/current/bin
OPT=$OPT:/opt/sixarm_debian_dpkg_scripts
OPT=$OPT:/opt/sixarm_gem_scripts
OPT=$OPT:/opt/sixarm_git_gitconfig
OPT=$OPT:/opt/sixarm_htx
OPT=$OPT:/opt/sixarm_mysql_scripts
OPT=$OPT:/opt/sixarm_postgresql_scripts
OPT=$OPT:/opt/sixarm_ruby_gem_scripts
OPT=$OPT:/opt/sixarm_ruby_gemforge
OPT=$OPT:/opt/sixarm_strategem
OPT=$OPT:/opt/sixarm_unix_shell_scripts

##########################################################################

# Amazon-related

EC2_HOME=/opt/ec2-api-tools/current

##########################################################################

# Android

ANDROID_HOME=/opt/android-sdk
PATH="$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"

##########################################################################

# Emacs

OPT="$OPT:/opt/emacs/current/bin"

##########################################################################

# Games, in the typical Linux setup

PATH=$PATH:/usr/games

##########################################################################

# Git mainline to have up-to-date git scripts.
# Feel free to move it somewhere better for you.

PATH=$PATH:/home/sources/git/mainline/bin

##########################################################################

# Go programming language

# Path
GOPATH=/opt/go

# Our operating system
#GOOS=linux

# The CPU architecture of our machine: "386" or "amd64".
#GOARCH=amd64

# Go root directory
#GOROOT=/opt/go

# Go binary directory
#GOBIN=/opt/go/bin

# Go binaries in command path
PATH="$PATH:$GOBIN"

##########################################################################

# History in the shell

HISTFILESIZE=999999
HISTSIZE=9999
HISTTIMEFORMAT="%Y/%m/%d %T "

##########################################################################

# Java language

OPT="$OPT:/opt/java/jdk/current/bin"

JAVA_HOME=/opt/java/jdk/current/bin/java
JDK_HOME=/opt/java/jdk/current

##########################################################################

# JRuby Java Runtime

JRUBY_HOME=/opt/ruby/jruby/current

# Options:
#
#   * --1.9: run in Ruby 1.9 mode (vs. older 1.8 or newer experimental 2.0)
#
# Options for the JVM:
#
#   * -J-Xms: the memory allocation pool starting size.
#
#   * -J-Xmx: the memory allocation pool maximum size.
#
#   * -J-XX:ThreadStackSize=2048 (a.k.a. -J-Xss2048k): increase the
#     available memory for the stack; default on many systems is 1024.
#
#   * -J-XX:+CMSClassUnloadingEnabled and -J-XX:+UseConcMarkSweepGC:
#     The JVM keeps classes forever; the classes stay in PermGen forever.
#     If you're running a Ruby script that defines classes at runtime,
#     and on a server, the result is a memory that is never reclaimed.
#     Enable CMSClassUnloadingEnabled and UseConcMarkSweepGC to tell
#     the GC to sweep PermGen to remove classes which are no longer used.
#     Thanks to Aaron Digulla on StackOverflow for this explanation.
#
#   * -J-XX:+TieredCompilation and -J-XX:TieredStopAtLevel=1:
#     Tiered compilation, introduced in Java SE 7, brings client startup
#     speeds to the server VM. Normally, a server VM uses the interpreter
#     to collect profiling information about methods that is fed into the
#     compiler. In the tiered scheme, in addition to the interpreter,
#     the client compiler is used to generate compiled versions of methods
#     that collect profiling information about themselves.
#
# Options for Java 7 and earlier:
#
#   * -J-XX:MaxPermSize=256m: retired and ignored in Java 8.
#
#   * -Xcompile.invokedynamic=true: improve JRuby's performance on VMs
#    that support it; this is the default when running on OpenJDK 8 builds.
#    Java 7 brings with it an important new feature called invokedynamic,
#    which greatly improves JRuby's performance on VMs that support it.
#    However, current released versions of OpenJDK 7 sometimes error out or
#    fail to optimize code as well as they should. The use of invokedynamic
#    is off by default on Java 7, and on by default on Java 8.
#
# Options that we don't use here yet do use for faster testing:
#
#   * -J-noverify: Do not verify bytecodes
#
#   * -Xcompile.mode=OFF: Do not use Just In-Time Compilation.
#
JRUBY_OPTS="--1.9 -J-Xms1024m -J-Xmx1024m -J-XX:ThreadStackSize=2048 -J-XX:+CMSClassUnloadingEnabled -J-XX:+UseConcMarkSweepGC -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1"

JRUBY_LD_LIBRARY_PATH="/opt/ruby/jruby/current/lib"
JRUBY_LD_RUN_PATH="/opt/ruby/jruby/current/lib"
JRUBY_LDFLAGS="-L/opt/jruby/current/lib"

# Append
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JRUBY_LD_LIBRARY_PATH"
LD_RUN_PATH="$LD_RUN_PATH:$JRUBY_LD_RUN_PATH"
LDFLAGS="$LDFLAGS $JRUBY_LDFLAGS"

##########################################################################

# Language & Collation

LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8

##########################################################################

# Library Settings
#
# You can specify the full pathname of the library,
# or use the `-LLIBDIR' flag during linking and do
# at least one of the following:
#
#   * add LIBDIR to the `LD_LIBRARY_PATH' environment variable during execution
#   * add LIBDIR to the `LD_RUN_PATH' environment variable during linking
#   * use the `-Wl,--rpath -Wl,LIBDIR' linker flag
#   * have your system administrator add LIBDIR to `/etc/ld.so.conf'
#
# We include all of them we use in all the settings we've encountered;
# you may want to tune this for your particular system or need.
#
# From http://www.eyrie.org/~eagle/notes/rpath.html
#
# Here's a brief primer on the way that this works on Solaris and Linux.
# The search paths for libraries come from three sources:
#
#   * the environment variable LD_LIBRARY_PATH (if set)
#   * any rpath encoded in the binary (more on this later)
#   * the system default search paths.
#
# The sources are searched in this order, and the first matching library is used.
#
# From http://www.netbsd.org/docs/pkgsrc/configuring.html
#
# If you want to pass flags to the linker, both in the configure step and the build step,
# you can do this in two ways: either set LDFLAGS or LIBS. The difference between the two
# is that LIBS will be appended to the command line, while LDFLAGS come earlier.
#
# From http://xahlee.org/UnixResource_dir/_/ldpath.html
#
# Some good examples of how LD_LIBRARY_PATH is used:
#
#   * When upgrading shared libraries, you can test out a library before replacing it.
#     In a similar vein, in case your upgrade program depends on shared libraries and
#     may freak out if you replace a shared library out from under it, you can use
#     LD_LIBRARY_PATH to point to a directory with copy of a shared libraries and
#     then you can replace the system copy without worry. You can even undo things
#     should things fail by moving the copy back.
#
#   * X11 uses LD_LIBRARY_PATH during its build process. X11 distributes its fonts
#     in “bdf” format, and during the build process it needs to “compile” the bdf
#     files into “pcf” files. LD_LIBRARY_PATH is used to point the the build lib
#     directory so it can run bdftopcf during the build stage before the shared
#     libraries are installed.
#
#   * Perl can be installed with most of its core code as a shared library.
#     This is handy if you embed Perl in other programs -- you can compile them
#     so they use the shared library and so you'll save memory at run time.
#     However Perl uses Perl scripts at various points in the build and install.
#     The 'perl' binary won't run until its shared libraries are installed,
#     unless LD_LIBRARY_PATH is used to bootstrap the process.

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/gmp/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib:/lib32:/usr/lib32:/usr/local/pgsql/lib"
LD_RUN_PATH="$LD_RUN_PATH:/opt/gmp/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib"
LDFLAGS="$LDFLAGS -L/opt/gmp/current/lib -L/opt/subversion/current/lib -L/opt/yaml/current/lib"

##########################################################################

# LLVM compiler

LLVM_MODULES="core jit native"
LLVM_LDFLAGS="-L/usr/local/opt/llvm/lib"
LLVM_CPPFLAGS="-I/usr/local/opt/llvm/include"

# Append
CPPFLAGS="$CPPFLAGS $LLVM_CPPFLAGS"
LDFLAGS=""$LDFLAGS $LLVM_LDFLAGS"

##########################################################################

# Nagios monitoring software

PATH=$PATH:/usr/lib/nagios/plugins

##########################################################################

# Node JS

OPT="$OPT:/opt/node/current"

##########################################################################

# Oracle-related

ORACLE_HOME=/opt/oracle/instantclient
NLS_LANG=AMERICAN_AMERICA.UTF8
DYLD_LIBRARY_PATH=$ORACLE_HOME

##########################################################################

# Postgres database

PATH="$PATH:/usr/local/pgsql/bin"
MANPATH="$MANPATH:/usr/local/pgsql/man"

##########################################################################

# Qt cross-platform application and UI framework.
# We put it in an arbitrary place; move it where you want.

PATH=$PATH:/usr/local/Trolltech/Qt-4.7.4/bin

##########################################################################

# RBENV is the Ruby Environment manager -- deprecated for us

RBENV_ROOT=~/.rbenv

##########################################################################

# Ruby language

OPT="$OPT:/opt/ruby/mri/current/bin"
OPT="$OPT:/opt/ruby/jruby/current/bin"

GEM_HOME=/opt/rubygems/mri/current
GEM_PATH=/opt/rubygems/mri/current
RUBYOPT='-rubygems -rpsych'

##########################################################################

# RubyMine IDE, which runs on Java

RUBYMINE_JDK=/opt/jdk/current

##########################################################################

# SQLite database

OPT="$OPT:/opt/sqlite/current/bin"

SQLITE_LD_LIBRARY_PATH="/opt/sqlite/current/lib"
SQLITE_LD_RUN_PATH="/opt/sqlite/current/lib"
SQLITE_LDFLAGS="-L/opt/sqlite/current/lib"

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SQLITE_LD_FLAGS"
LD_RUN_PATH="$LD_RUN_PATH:$SQLITE_LD_RUN_PATH"
LDFLAGS="$LDFLAGS $SQLITE_LDFLAGS"

##########################################################################

# Set terminal to use 256 colors

TERM=xterm-256color

##########################################################################

# X11 X Window System

OPT="$OPT:/opt/X11/bin"

##########################################################################

# Conclusion

PATH=$OPT:$PATH
