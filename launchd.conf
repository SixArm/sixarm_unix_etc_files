##
# This environment file is sourced for each new shell.
#
# It sets the default PATH, load paths, language, history,
# and application-specific variables for Java, Ruby, etc.
#
# On Ubuntu, we typically use /etc/environment like this:
#
#    set FOO=bar
#
# On OSX, we typically use /etc/launchd.conf like this:
#
#    setenv FOO bar
#
# For our systems, the /etc/environment file is canoncical,
# whereas the /etc/launchd.conf is just an adjusted copy.
##

### PATH

# Paths for Unix typical systems
#
#      /usr/local/{bin,sbin}
#      /usr/{bin,sbin}
#      /{bin,sbin}
#
setenv PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin

# Games

setenv PATH $PATH:/usr/games

# Nagios monitoring software

setenv PATH $PATH:/usr/lib/nagios/plugins

# PostgreSQL database

setenv PATH $PATH:/usr/local/pgsql/bin
setenv MANPATH $MANPATH:/usr/local/pgsql/man

# Path for git mainline to have up-to-date git scripts.
# Feel free to move it somewhere better for you.

setenv PATH $PATH:/home/sources/git/mainline/bin

# Path to Qt -- we put it in an arbitrary place.
# Feel free to move it somewhere better for you.

setenv PATH $PATH:/usr/local/Trolltech/Qt-4.7.4/bin

# Path to X11 as installed on OSX using brew.

setenv PATH $PATH:/opt/X11/bin

# Paths for current versions of software in /opt/* directory.
# We typically want these versions to come before the system versions.
# We create an OPT variable to make it easy to set or unset these.

setenv OPT
setenv OPT $OPT:/opt/ec2-api-tools/current/bin
setenv OPT $OPT:/opt/emacs/current/bin
setenv OPT $OPT:/opt/gcc/current/bin
setenv OPT $OPT:/opt/jdk/current/bin
setenv OPT $OPT:/opt/jruby/current/bin
setenv OPT $OPT:/opt/jq
setenv OPT $OPT:/opt/packer
setenv OPT $OPT:/opt/rbenv/bin
setenv OPT $OPT:/opt/redis/current/bin
setenv OPT $OPT:/opt/ruby/current/bin
setenv OPT $OPT:/opt/rubygems/current/bin
setenv OPT $OPT:/opt/ruby-build/bin
setenv OPT $OPT:/opt/rubygems/current/bin
setenv OPT $OPT:/opt/rubymine/current/bin
setenv OPT $OPT:/opt/sbt/current/bin
setenv OPT $OPT:/opt/sqlite/current/bin
setenv OPT $OPT:/opt/sublime/current
setenv OPT $OPT:/opt/subversion/current/bin
setenv OPT $OPT:/opt/vim/current/bin
setenv OPT $OPT:/opt/sixarm_debian_dpkg_scripts
setenv OPT $OPT:/opt/sixarm_gem_scripts
setenv OPT $OPT:/opt/sixarm_git_gitconfig
setenv OPT $OPT:/opt/sixarm_htx
setenv OPT $OPT:/opt/sixarm_mysql_scripts
setenv OPT $OPT:/opt/sixarm_postgresql_scripts
setenv OPT $OPT:/opt/sixarm_ruby_gem_scripts
setenv OPT $OPT:/opt/sixarm_ruby_gemforge
setenv OPT $OPT:/opt/sixarm_strategem
setenv OPT $OPT:/opt/sixarm_unix_shell_scripts

# Path for user .rbenv ruby environment.

#PATH_RBENV ~/.rbenv/bin:~/.rbenv/shims

# Finalize

setenv PATH $OPT:$PATH


### Misc

setenv MANPATH $MANPATH:/usr/local/pgsql/man
setenv TERM xterm-256color


### Language & Collation

setenv LANG en_US.UTF-8
setenv LANGUAGE en_US.UTF-8
setenv LC_CTYPE en_US.UTF-8
setenv LC_ALL en_US.UTF-8


### History

setenv HISTFILESIZE 999999
setenv HISTSIZE 9999
setenv HISTTIMEFORMAT "%Y/%m/%d %T "


### Amazon-related

setenv EC2_HOME /opt/ec2-api-tools/current


### Go related

# Our operating system
#setenv GOOS linux

# The CPU architecture of our machine: "386" or "amd64".
#setenv GOARCH amd64

# Go root directory
setenv GOROOT /opt/go

# Go binary directory
setenv GOBIN /opt/go/bin

# Go binaries in command path
setenv PATH $PATH:$GOBIN


### Java-related

setenv JAVA_HOME /opt/jdk/current/bin/java
setenv JDK_HOME /opt/jdk/current
setenv JRUBY_HOME /opt/jruby/current
setenv JRUBY_OPTS --1.9


### Oracle-related

setenv NLS_LANG AMERICAN_AMERICA.UTF8
setenv ORACLE_HOME /opt/oracle/instantclient
setenv DYLD_LIBRARY_PATH $ORACLE_HOME


### Ruby-related

setenv GEM_HOME /opt/rubygems/current
setenv GEM_PATH /opt/rubygems/current

setenv RUBYMINE_JDK /opt/jdk/current
setenv RUBYOPT '-rubygems -rpsych'
setenv RBENV_ROOT ~/.rbenv


# Library Settings
#
# You can specify the full pathname of the library,
# or use the `-LLIBDIR' flag during linking and do
# at least one of the following:
#
#   * add LIBDIR to the `LD_LIBRARY_PATH' environment variable during execution
#   * add LIBDIR to the `LD_RUN_PATH' environment variable during linking
#   * use the `-Wl,--rpath -Wl,LIBDIR' linker flag
#   * have your system administrator add LIBDIR to `/etc/ld.so.conf'
#
# We include all of them we use in all the settings we've encountered;
# you may want to tune this for your particular system or need.
#
# From http://www.eyrie.org/~eagle/notes/rpath.html
#
# Here's a brief primer on the way that this works on Solaris and Linux.
# The search paths for libraries come from three sources:
#
#   * the environment variable LD_LIBRARY_PATH (if set)
#   * any rpath encoded in the binary (more on this later)
#   * the system default search paths.
#
# The sources are searched in this order, and the first matching library is used.
#
# From http://www.netbsd.org/docs/pkgsrc/configuring.html
#
# If you want to pass flags to the linker, both in the configure step and the build step,
# you can do this in two ways: either set LDFLAGS or LIBS. The difference between the two
# is that LIBS will be appended to the command line, while LDFLAGS come earlier.
#
# From http://xahlee.org/UnixResource_dir/_/ldpath.html
#
# Some good examples of how LD_LIBRARY_PATH is used:
#
#   * When upgrading shared libraries, you can test out a library before replacing it.
#     In a similar vein, in case your upgrade program depends on shared libraries and
#     may freak out if you replace a shared library out from under it, you can use
#     LD_LIBRARY_PATH to point to a directory with copy of a shared libraries and
#     then you can replace the system copy without worry. You can even undo things
#     should things fail by moving the copy back.
#
#   * X11 uses LD_LIBRARY_PATH during its build process. X11 distributes its fonts
#     in “bdf” format, and during the build process it needs to “compile” the bdf
#     files into “pcf” files. LD_LIBRARY_PATH is used to point the the build lib
#     directory so it can run bdftopcf during the build stage before the shared
#     libraries are installed.
#
#   * Perl can be installed with most of its core code as a shared library.
#     This is handy if you embed Perl in other programs -- you can compile them
#     so they use the shared library and so you'll save memory at run time.
#     However Perl uses Perl scripts at various points in the build and install.
#     The 'perl' binary won't run until its shared libraries are installed,
#     unless LD_LIBRARY_PATH is used to bootstrap the process.

# Clear
setenv LD_LIBRARY_PATH
setenv LD_RUN_PATH
setenv LDFLAGS
setenv LIBS

setenv LD_LIBRARY_PATH /opt/jruby/current/lib:/opt/gmp/current/lib:/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib:/lib32:/usr/lib32:/usr/local/pgsql/lib
setenv LD_RUN_PATH /opt/jruby/current/lib:/opt/gmp/current/lib:/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib
setenv LDFLAGS -L/opt/jruby/current/lib:/opt/gmp/current/lib:/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib
#setenv LIBS /opt/jruby/current/lib:/opt/gmp/current/lib:/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib


# Conclusion

#export PATH
